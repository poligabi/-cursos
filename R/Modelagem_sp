
### script install packages enm ###

# Thadeu Sobral de Souza
# setembro/2019

# occurrences
if(!require(mapr)) install.packages("mapr")
if(!require(spocc)) 
if(!require(sf)) install.packages("sf")
if(!require(tidyverse)) install.packages("tidyverse")

# variables
if(!require(caret)) install.packages("caret")
if(!require(colorRamps)) install.packages("colorRamps")
if(!require(corrplot)) install.packages("corrplot")
if(!require(factoextra)) install.packages("factoextra")
if(!require(FactoMineR)) install.packages("FactoMineR")
if(!require(maps)) install.packages("maps")
if(!require(maptools)) install.packages("maptools")
if(!require(psych)) install.packages("psych")
if(!require(raster)) install.packages("raster")
if(!require(rgdal)) install.packages("rgdal")
if(!require(RStoolbox)) install.packages("RStoolbox")
if(!require(spatstat)) install.packages("spatstat")
if(!require(usdm)) install.packages("usdm")

# algorithms
if(!require(dismo)) install.packages("dismo")
if(!require(kernlab)) install.packages("kernlab")
if(!require(randomForest)) install.packages("randomForest")
if(!require(rJava)) install.packages("rJava") # baixar o java mais novo e 64 bits

# ensembles
if(!require(data.table)) install.packages("data.table")


### script download occurrences - spocc ###

# Thadeu Sobral-Souza
# setembro - 2019

## memory
rm(list = ls())

## packages
library(mapr) 
library(spocc) #dados de ocorrencia
library(tidyverse) #sintaxe do R

# check loaded packeges
search()

# directory
setwd("C:/R/modelagem_sp")
getwd()
dir()

###---------------------------------------------------------------------------------------###

# species list
sp <- c("Haddadus binotatus") #ou lita de espécies de interesse
sp

sp.enm <- c("haddadus_binotatus")
sp.enm

sp1 <- c("Sapajus flavius")
sp1
# bases de dados for download
ba <- c("gbif", "bison", "inat", "ebird", "ecoengine", "vertnet", "idigbio", "obis", "ala")
ba

# download data
re <- spocc::occ(query = sp1, from = ba, has_coords = TRUE, limit = 10000)
re	#query=palavra-chave pesquisada, from=base de dados, has_coods=com coord, limit=n max de pontos
head(re)

#transformando data em data.frame
da <- spocc::occ2df(re) 
da

#transformando latitude e longitude em caracteres numericos
da$latitude <- as.numeric(da$latitude)
da$longitude <- as.numeric(da$longitude)


#plotando ocorrencias
# Para o mundo
bra <- map_data("world")
ggplot() +  
  geom_polygon(data=bra, aes(x=long, y=lat, group=group)) +
  geom_point(data=da, aes(x=longitude, y=latitude), color="yellow")


# Para o Brasil
bra <- map_data("world", region="Brazil")
ggplot() +  
  geom_polygon(data=bra, aes(x=long, y=lat, group=group)) +
  geom_point(data=da, aes(x=longitude, y=latitude), color="red")

# salvando tabela
readr::write_csv(da, "occurrences-mac.csv")
write.table(da,"occurrences-mac.csv",sep=";") #sep=separador dos dados, tabulacao

#achar sinonimos da sua especies
library(taxize)
synonyms("Sapajus flavius", db="itis")


# baixar variaveis climaticas worldclim

#Thadeu Sobral-Souza
# Setembro - 2010


## memory
rm(list = ls())

## packages

library(colorRamps)
library(raster)
library(sf)
library(tidyverse)

# check loaded packeges
search()

# directory
setwd("C:/R/modelagem_sp")
getwd()
dir()

###---------------------------------------------------------------------------------------###
dir.create("01_variables")
setwd("01_variables")
getwd()
# download
br <- raster::getData("GADM", country = "BRA", level = 0) %>% 
  sf::st_as_sf()
br

# plot
ggplot() +
  geom_sf(data = br) +
  theme_minimal()

# export limit
sf::st_write(br, "limit_brazil_longlat_wgs84.shp")

# erase file
unlink("gadm36_BRA_0_sp.rds", force = TRUE)

###---------------------------------------------------------------------------------------###

## 2. climate variables
# directory
dir.create("01_variables")
setwd("01_variables")

# download presente e futuro
var <- raster::getData(name = "worldclim", var = "bio", res = 10)
var.f <-raster::getData('CMIP5', var='bio', res=10, rcp=85, model='AC', year=70) 
		#CMIP5=cenarios de previsao futuro, var=variaveis bio climaticas, 
		#res=resolucao de 10 minutos, rcp=modelo utilizado, 85 é o +catastrófico
		#model=AC ou CC
var	#presente
var.f		#FUTURO names: cc(modelo usado)bi(bioclimaticas)70(ano)3(qual variavel)


# plot
ggplot() +
  geom_raster(data = raster::rasterToPoints(var[[1]]) %>% tibble::as_tibble(), 
          aes(x, y, fill = bio1)) +
  scale_fill_gradientn(colours = colorRamps::matlab.like2(100)) +
  theme_minimal()

# plot future
ggplot() +
  geom_raster(data = raster::rasterToPoints(var.f[[1]]) %>% tibble::as_tibble(), 
              aes(x, y, fill = ac85bi701)) +
  scale_fill_gradientn(colours = colorRamps::matlab.like2(100)) +
  theme_minimal()

# names
names(var)
names(var) <- c(paste0("pres_bio0", 1:9), paste0("pres_bio", 10:19))
names(var) #mudou o nome adicionando que é pres_
var

#names future
names(var.f)
names(var.f) <- c(paste0("future_bio0", 1:9), paste0("future_bio", 10:19))
names(var.f)
var.f

## bioclimates
# BIO01 = Temperatura media anual
# BIO02 = Variacao da media diurna (media por mes (temp max - temp min))
# BIO03 = Isotermalidade (BIO02/BIO07) (* 100)
# BIO04 = Sazonalidade da temperatura (desvio padrao deviation *100)
# BIO05 = Temperatura maxima do mes mais quente
# BIO06 = Temperatura minima do mes mais frio
# BIO07 = Variacao da temperatura anual (BIO5-BIO6)
# BIO08 = Temperatura media do trimestre mais chuvoso
# BIO09 = Temperatura media do trimestre mais seco
# BIO10 = Temperatura media do trimestre mais quente
# BIO11 = Temperatura media do trimestre mais frio
# BIO12 = Precipitacao anual
# BIO13 = Precipitacao do mes mais chuvoso
# BIO14 = Precipitacao do mes mais seco
# BIO15 = Sazonalidade da precipitacao (coeficiente de variacao)
# BIO16 = Precipitacao do trimestre mais chuvoso
# BIO17 = Precipitacao do trimestre mais seco
# BIO18 = Precipitacao do trimestre mais quente
# BIO19 = Precipitacao do trimestre mais frio


###---------------------------------------------------------------------------------------###

## 3. adust extention of variables
# crop

setwd('C:/R/modelagem_sp/01_variables')

#cortando presente
br = shapefile("limit_brazil_longlat_wgs84.shp") 
var.br <- raster::crop(var, br) %>% 
  raster::mask(br)
var.br


#cortando futuro
br = shapefile("limit_brazil_longlat_wgs84.shp")
var.br.f <- raster::crop(var.f, br) %>% 
  raster::mask(br)
var.br.f

# plot
raster::plot(var.br)
raster::plot(var.br.f)

# export pra poderes abrir em QGIS
raster::writeRaster(x = var.br, filename = names(var.br), bylayer = TRUE, 
                    options = c("COMPRESS=DEFLATE"), format = "GTiff", overwrite = TRUE)

raster::writeRaster(x = var.br.f, filename = names(var.br.f), bylayer = TRUE, 
                    options = c("COMPRESS=DEFLATE"), format = "GTiff", overwrite = TRUE)


# erase folder
unlink("wc10", recursive = TRUE, force = TRUE)
unlink("cmip5", recursive = TRUE, force = TRUE)

###---------------------------------------------------------------------------------------###

### script download occurrences - spocc ###

# Thadeu Sobral-Souza
# Setembro - 2019

## memory
rm(list = ls())

## Abrir os dados baixados e acertar as colunas da espÃ©cie####


## packages
library(colorRamps)
library(mapr)
library(raster)
library(sf)
library(tidyverse)

# check loaded packeges
search()

###---------------------------------------------------------------------------------------###

## data
## occ
# directory
setwd("C:/R/modelagem_sp/")

# import data
occ <- readr::read_csv("occurrences.csv")
occ

## variaveis
# directory
setwd("C:/R/modelagem_sp/01_variables")
getwd()

# import data
var <- raster::raster("pres_bio01.tif")
var

## limites da area (brazil)
# import limit
lim <- sf::st_read("limit_brazil_longlat_wgs84.shp")
plot(lim)


# map
ggplot() +
  geom_raster(data = raster::rasterToPoints(var) %>% tibble::as_tibble(), 
              aes(x, y, fill = pres_bio01)) +
  scale_fill_gradientn(colours = colorRamps::matlab.like2(100)) +
  geom_sf(data = lim, color = "black", alpha = 0) +
  geom_point(data = occ, aes(x = longitude, y = latitude), alpha = .1) +
  theme_minimal()

###---------------------------------------------------------------------------------------###

## clear data = filtro

# 1. registers and date
occ.cl <- occ %>% 
  dplyr::distinct(longitude, latitude, .keep_all = TRUE) %>% # remove duplicates
  dplyr::filter(!is.na(longitude)) %>% # remove longitude with NAs
  dplyr::filter(!is.na(latitude)) %>% # remove latitude with NAs
  dplyr::filter(date > "1990-01-01") #filtra por ano, so fica maior que 1990
	dplyr::filter(name != "haddadus binotatus") #poderia continuar filtrando
  
  # filter by date
occ.cl

###---------------------------------------------------------------------------------------###

## 2. poins inside limit
# plot
ggplot() +
  geom_point(data = occ.cl %>% dplyr::select(longitude, latitude), aes(x = longitude, y = latitude), 
             color = "black", alpha = .3) +
	geom_sf(data = lim, color = "black", alpha = 0) +
  theme_minimal()

# point inside limit
occ.cl.lim <- occ.cl %>% 
  sf::st_as_sf(coords = c("longitude", "latitude"), crs = 4326) %>% 
  st_join(lim, join = st_intersects) %>% 
  dplyr::filter(!is.na(lim$GID_0)) #olhar names(lim)
occ.cl.lim

plot(occ.cl.lim) # pontos dividindo por cores para cada categoria das coluna da tabela de atributos

# plot
ggplot() +
  geom_point(data = occ.cl %>% dplyr::select(longitude, latitude), aes(x = longitude, y = latitude), 
             color = "black", alpha = .5) +
  geom_sf(data = occ.cl.lim, color = "red", pch = 3, alpha = .9) +
  theme_minimal()

# plot final
ggplot() +
  geom_sf(data = lim) +
  geom_sf(data = occ.cl.lim, color = "black", alpha = .3) +
  theme_minimal()

#ate então era shapefile agorra vamos voltar a fazer uma tabela 
# data
occ.cl.lim.coords <- occ.cl.lim %>% 
  sf::st_coordinates()

occ.cl.lim.da <- occ.cl.lim %>% 
  `st_geometry<-`(NULL) %>% 
  tibble::as_tibble() %>% 
  dplyr::select(name, prov, date) %>% 
  cbind(occ.cl.lim.coords) %>% 
  dplyr::select(name, X, Y, prov, date) %>% 
  dplyr::rename(lon = X) %>% 
  dplyr::rename(lat = Y)
occ.cl.lim.da

###---------------------------------------------------------------------------------------###

## 3. one point by cell ->agora filtragem geografica

# raster original
var
plot(var, col = colorRamps::matlab.like2(100))

# copy
var.id <- var
plot(var.id, col = colorRamps::matlab.like(100))

# create a raster with ids from cells =com ids p cada celula
var.id[] # values from cells

plot(is.na(var.id)) # na
plot(!is.na(var.id)) # not na

var.id[!is.na(var.id)] # values not na

ncell(var.id[!is.na(var.id)]) # cell numbers not na
seq(var.id[!is.na(var.id)]) # seq 1 to number of cells

var.id[!is.na(var.id)] <- seq(var.id[!is.na(var.id)])	#add numero em seq d cada celula
plot(var.id, col = colorRamps::matlab.like2(100)) #visualizar em cores
#assim podemos pedir p checar cada celula pelo id dela
#para tirar os excessos de pontos

# extract values
occ.cl.lim.oppc <- occ.cl.lim.da %>% 
  mutate(oppc = raster::extract(var.id, dplyr::select(occ.cl.lim.da, lon, lat)))
occ.cl.lim.oppc

# verify
sort(table(occ.cl.lim.oppc$oppc))
barplot(sort(table(occ.cl.lim.oppc$oppc))) #quantos pontos por celula

# oppc
occ.oppc <- occ.cl.lim.oppc %>% 
  dplyr::distinct(oppc, .keep_all = TRUE) %>% 
  na.omit
occ.oppc 	#agora tirou o excesso

# verify
sort(table(occ.oppc$oppc))
barplot(sort(table(occ.oppc$oppc))) #vemos todos com 1 ponto

# export
setwd("C:/R/modelagem_sp")
occ.oppc$name<-rep("Haddadus binotatus", nrow(occ.oppc)) #renomeia todos com nome=
readr::write_csv(occ.oppc, "occ_clean_lim_oppc.csv")
getwd()

### script variables selection - worldclim ###

# mauricio vancine
# 08-12-2018

# memory
rm(list = ls())

# packages
library(caret) #machine learning
library(colorRamps) 
library(corrplot) #plot de correlação
library(factoextra) #pca
library(FactoMineR) #pca
library(psych) #analise fatorial
library(RStoolbox) #pca com raster
library(raster) 
library(tidyverse) #tabelas e sintaxes
library(usdm)#vif
library(viridis) #paleta de cores

# check loaded packeges
search()

# directory
setwd("C:/R/modelagem_sp/01_variables")
getwd()
dir()

###---------------------------------------------------------------------------------------###

# list variables
ti <- dir(pattern = ".tif") #lista os rasters
ti

pres <- grep("pres", ti, value=T) #lista os do presente 
fut <- grep("future", ti, value=T) #lista os do futuro

# import rasters
var.p <- raster::stack(pres)
var.p
plot(var.p[[1:4]], col = colorRamps::matlab.like2(100))

### import raster future
var.f <- raster::stack(fut)
var.f
plot(var.f[[1:4]], col = colorRamps::matlab.like2(100))


# extract values
var.da <- var.p %>% 	#extraindo os valores do raster do presente
  raster::values() %>% 	#sair do geografico para usar só o ambiental
  na.omit

# verify
head(var.da)
dim(var.da)

###---------------------------------------------------------------------------------------###

## variable selection
# back one directory
setwd("C:/R/modelagem_sp")

# directory
#dir.create("02_selection")
setwd("02_selection")
getwd()

## 1.correlation
# create directory
#dir.create("01_correlation") 
setwd("01_correlation")

# correlation
corr <- cor(var.da, method = "spearman")
corr

# export
readr::write_csv(tibble::as_tibble(corr), "correlation.csv")

# correlation plot
corrplot::corrplot(corr, type = "lower", diag = FALSE, tl.srt = 45, mar = c(3, 0.5, 2, 1))

# export figure
png("corr.tif", w = 18, he = 18, units = "cm", res = 300) #resolucao 300dpi q revistas pedem
corrplot::corrplot(corr, type = "lower", diag = FALSE, tl.srt = 45, mar = c(3, 0.5, 2, 1))
dev.off()


## select variables
# verify as correlaçoes menor ou igual a 0.7
caret::findCorrelation(corr, cutoff = .7, names = TRUE, verbose = TRUE)

# correlated variables
fi <- caret::findCorrelation(corr, cutoff = .7)
fi

# new test retira todas <=0.7
corr2 <- cor(var.da[, -fi], method = "spearman")
corr2

# verify
caret::findCorrelation(corr2, cutoff = .7, names = TRUE, verbose = TRUE)

# export
readr::write_csv(tibble::as_tibble(corr2), "correlation2.csv")

# correlation plot
corrplot::corrplot(corr2, type = "lower", diag = FALSE, tl.srt = 45, mar = c(3, 0.5, 2, 1))

# export figure
png("corr2.tif", w = 20, he = 15, units = "cm", res = 300)
corrplot::corrplot(corr2, type = "lower", diag = FALSE, tl.srt = 45, mar = c(3, 0.5, 2, 1))
dev.off()

###---------------------------------------------------------------------------------###

# 2. vif (fator de inflacao da variancia, outra forma de selecionar variaveis)
# back one directory
setwd("C:/R/modelagem_sp/02_selection")

# create directory
#dir.create("02_vif") 
setwd("02_vif") 
getwd()

# vif 10 # escolha do valor de corte influencia, mas nao ha um numero magico
vi.10 <- usdm::vifstep(var.da, th = 10, maxobservations = nrow(var.da))
vi.10
vi.10@results
#mostra quais variaveis estao correlacionadas 
#as que sobram tem vif<10
#valor de corte alto mostrara mais

# vif 02
vi.02 <- usdm::vifstep(var.da, th = 2, maxobservations = nrow(var.da))
vi.02
vi.02@results
#valor menor, menos variaveis diferentes, e o resto correlacioanadas

# export
readr::write_csv(vi.10@results, "vif_10.csv")
readr::write_csv(vi.02@results, "vif_02.csv")

###---------------------------------------------------------------------------------###

# 3. factorial analysis -melhor p analises temporais

# back one directory
setwd("C:/R/modelagem_sp/02_selection")

# create directory
#dir.create("03_factorial") 
setwd("03_factorial") 
getwd()


# preliminaries analysis
# kmo e bartlett
KMO(cor(var.da)) # > 0.5
cortest.bartlett(cor(var.da), n = nrow(var.da)) # p < 0.05

# screeplot - number os axis
psych::fa.parallel(var.da, fa = "fa")

# exportar screeplot
png("screeplot_fatorial.tif", wi = 20, he = 15, un = "cm", res = 300)
psych::fa.parallel(var.da, fa = "fa") 
dev.off()

# fatorial
fa.5 <- psych::fa(var.da, nfactors = 5, rotate = "varimax")
fa.5

# loadings
fa.5$loadings

# export
write.csv(fa.5$loadings %>% abs %>% round(2), "fa_5_loadings.csv")

###---------------------------------------------------------------------------------###

# 4. principal component analysis
# back one directory
setwd("C:/R/modelagem_sp/02_selection")

# create directory
#dir.create("04_pca") 
setwd("04_pca") 

# pca
pca <- FactoMineR::PCA(var.da, scale.unit = TRUE, graph = FALSE)
pca
#mostra todos os resultados disponivel

# eigenvalues
factoextra::get_eig(pca) %>%  #get_eig pega os autovetores
  round(2)				#arredonda resultados pra 2 decimais
					#variance_percent, o quanto cada eixo explica
#pode usar eigenvalues >1 ou os eixos q cumulativamente explicam até 95%

# eigenvalues plot
factoextra::fviz_eig(pca, addlabels = TRUE, ylim = c(0, 51), ggtheme = theme_classic())
ggsave("00_screeplot.tiff", he = 15, wi = 20, un = "cm", dpi = 300)

# contributions
pca$var$contrib

# selection 
pca$var$contrib %>% 
  tibble::as_tibble() %>% 
  dplyr::mutate(var = rownames(pca$var$contrib)) %>%
  dplyr::select(var, Dim.1, Dim.2) %>%
  dplyr::arrange(desc(Dim.1))
#porcent de contribuiçao de cada variavel pra cada eixo

# contributions ->transforma em raster
factoextra::fviz_contrib(pca, choice = "var", axes = 1, ggtheme = theme_classic())
ggsave("01_contributions_pc1.tiff", he = 15, wi = 20, un = "cm", dpi = 300)

factoextra::fviz_contrib(pca, choice = "var", axes = 2, ggtheme = theme_classic())
ggsave("02_contributions_pc2.tiff", he = 15, wi = 20, un = "cm", dpi = 300)

# biplot
factoextra::fviz_pca(pca, geom = "point", col.ind = "black", alpha.ind = .05)
ggsave("03_biplot_pca.tiff", he = 15, wi = 20, un = "cm", dpi = 300)

###----------------------------------------------------------------------------------###

## pca of raster 		# faz tudo acima automaticamente=melhor alternatica
pca.ra <- RStoolbox::rasterPCA(var.p, spca = TRUE) 
pca.ra

# contribution of each axis 
summary(pca.ra$model)
pca$eig

# plot pf pcas as variables
ggplot() +
  geom_raster(data = raster::rasterToPoints(pca.ra$map[[1]]) %>% tibble::as_tibble(), 
              aes(x, y, fill = PC1)) +
  scale_fill_gradientn(colours = viridis::viridis(100)) +
  theme_minimal()

# export 			#map[1:5]= pois selecionamos os 5 melhores eixos)
raster::writeRaster(x = pca.ra$map[[1:5]], filename = paste0("pc0", 1:5), bylayer = TRUE, 
                    options = c("COMPRESS=DEFLATE"), format = "GTiff", overwrite = TRUE)

###---------------------------------------------------------------------------------###
###spthin   #pacote que permite analises temporais com pca



### script enm dismo - unique algorithms ###

# mauricio vancine
# 12-12-2018

# memory
rm(list = ls())

# packages
library(colorRamps)
library(dismo) #algoritmos
library(raster)
library(rJava) #maxent baseado em linguagem java
library(sf) #shapefile
library(tidyverse)
library(viridis) #paleta de cores
library(kernlab) #svm
library(randomForest)

# verify packages
search()

###---------------------------------------------------------------------------###

## import data

# 1. occ
# directory
setwd("C:/R/modelagem_sp/")
dir()


# occurrences
occ <- readr::read_csv("occ_clean_lim_oppc.csv") %>% 
  dplyr::filter(name == "Haddadus binotatus") #que nome salvei?
occ

#occ$name<-rep("Haddadus binotatus", nrow(occ)

# create shapefile
occ.sh <-  occ %>% 
  sf::st_as_sf(coords = c("lon", "lat"), crs = 4326)
occ.sh

# plot
ggplot() + 
  geom_sf(data = occ.sh, col = "black", size = 2.5, alpha = .4) +
  theme_minimal()
  
# export shapefile
sf::st_write(occ.sh, "occ_haddadus_binotatus_oppc.shp")

###---------------------------------------------------------------------------###

##  2. variables
# directory
setwd("C:/R/modelagem_sp/02_selection/04_pca")
dir()

# list files
ti <- dir(patt = ".tif$")
ti

# import rasters
var <- raster::stack(ti)
var

# plot
plot(var, col = viridis::viridis(100))

ggplot() +
  geom_raster(data = raster::rasterToPoints(var[[1]]) %>% tibble::as_tibble(), 
              aes(x, y, fill = pc01)) +
  scale_fill_gradientn(colours = viridis::viridis(100)) +
  geom_point(data = occ, aes(lon, lat), size = 2.5, alpha = .4) +
  theme_minimal()

###---------------------------------------------------------------------------###

## extract coordinates for background
# coordinates
## background coordinates
bc <- tibble::as.tibble(raster::rasterToPoints(var)[, 1:2])
bc
colnames(bc) <- c("lon", "lat")
bc

# plot
ggplot() +
  geom_raster(data = raster::rasterToPoints(var[[1]]) %>% tibble::as_tibble(), 
              aes(x, y, fill = pc01)) +
  scale_fill_gradientn(colours = viridis::viridis(100)) +
  geom_point(data = bc %>% dplyr::sample_n(1000), aes(lon, lat), size = 2.5, pch = 15, alpha = .4) +
  theme_minimal()

###---------------------------------------------------------------------------###

# verify maxent
# copy maxent.jar in "C:\Users\Poliana\Documents\R\win-library\3.6\dismo\java"
file.exists(paste0(system.file(package = "dismo"), "/java/maxent.jar"))

###---------------------------------------------------------------------------###

### enms ###

# diretory
setwd("C:/R/modelag2019")

#dir.create("03_modelos")
setwd("03_modelos")

#dir.create("01_modelos_unicos")
setwd("01_modelos_unicos")
getwd()


# select presence points
pr.species <- occ %>% 
  dplyr::select(lon, lat)
pr.species

# select background points
bc.species <- bc %>% 
  dplyr::sample_n(nrow(pr.species))
bc.species

# plot
ggplot() +
  geom_raster(data = raster::rasterToPoints(var[[1]]) %>% tibble::as_tibble(), 
              aes(x, y, fill = pc01)) +
  scale_fill_gradientn(colours = viridis::viridis(100)) +
  geom_point(data = bc.species, aes(lon, lat), size = 2.5, pch = 15, alpha = .4) +
  geom_point(data = pr.species, aes(lon, lat), size = 2.5, pch = 20, alpha = .4) +
  theme_minimal()

###---------------------------------------------------------------------------###

## preparing data - train and test presence data	

# sample train
pr.sample.train.id <- sample(nrow(pr.species), round(.7 * nrow(pr.species)))

# select train data
pr.sample.train <- pr.species %>% 
  dplyr::slice(pr.sample.train.id)
pr.sample.train

# select test data
pr.sample.test <- pr.species %>% 
  dplyr::slice(-pr.sample.train.id)
pr.sample.test

# plot
ggplot() +
  geom_raster(data = raster::rasterToPoints(var[[1]]) %>% tibble::as_tibble(), 
              aes(x, y, fill = pc01)) +
  scale_fill_gradientn(colours = viridis::viridis(100)) +
  geom_point(data = pr.sample.train, aes(lon, lat), size = 3.5, pch = 20, alpha = .5) +
  geom_point(data = pr.sample.test, aes(lon, lat), color = "darkgreen", size = 3.5, pch = 20, alpha = .7) +
  theme_minimal()


## train and test background data	
# sample train
bc.sample.train.id <- sample(nrow(bc.species), round(.7 * nrow(bc.species)))
bc.sample.train.id

# select train data
bc.sample.train <- bc.species %>% 
  dplyr::slice(bc.sample.train.id)
bc.sample.train

# select test data
bc.sample.test <- bc.species %>% 
  dplyr::slice(-bc.sample.train.id)
bc.sample.test

# plot
ggplot() +
  geom_raster(data = raster::rasterToPoints(var[[1]]) %>% tibble::as_tibble(), 
              aes(x, y, fill = pc01)) +
  scale_fill_gradientn(colours = viridis::viridis(100)) +
  geom_point(data = bc.sample.train, aes(lon, lat), pch = 15, size = 3, alpha = .5) +
  geom_point(data = bc.sample.test, aes(lon, lat), color = "darkgreen", pch = 15, size = 3, alpha = .7) +
  theme_minimal()


# selecting data to enm
# train
train <- dismo::prepareData(x = var, 
                            p = pr.sample.train, 
                            b = bc.sample.train) %>%  na.omit
train

# test
test <- dismo::prepareData(x = var, 
                           p = pr.sample.test, 
                           b = bc.sample.test) %>% na.omit
test
  	
###---------------------------------------------------------------------------###

## algorithms
## 1. bioclim
# 1.1 calibration
train.cal <- train %>% 
  dplyr::filter(pb == 1) %>% 
  dplyr::select(-1)
train.cal

Bioclim <- dismo::bioclim(train.cal)	
plot(Bioclim)
response(Bioclim)

# 1.2 projection
enm.Bioclim <- dismo::predict(var, Bioclim, progress = "text")	
enm.Bioclim

# plot
ggplot() +
  geom_raster(data = raster::rasterToPoints(enm.Bioclim) %>% tibble::as_tibble(), 
              aes(x, y, fill = layer)) +
  scale_fill_gradientn(colours = colorRamps::matlab.like2(100)) +
  theme_minimal()

ggplot() +
  geom_raster(data = raster::rasterToPoints(enm.Bioclim) %>% tibble::as_tibble(), 
              aes(x, y, fill = layer)) +
  scale_fill_gradientn(colours = colorRamps::matlab.like2(100)) +
  geom_point(data = pr.sample.train, aes(lon, lat), pch = 20, size = 2.5, alpha = .7) +
  theme_minimal()

ggplot() +
  geom_raster(data = raster::rasterToPoints(enm.Bioclim) %>% tibble::as_tibble(), 
              aes(x, y, fill = layer)) +
  scale_fill_gradientn(colours = colorRamps::matlab.like2(100)) +
  geom_point(data = pr.sample.test, aes(lon, lat), color = "darkgreen", pch = 20, size = 2.5, alpha = .7) +
  theme_minimal()

# 1.3 evaluation
e.Bioclim <- dismo::evaluate(p = test %>% dplyr::filter(pb == 1) %>% dplyr::select(-1), 
                             a = test %>% dplyr::filter(pb == 0) %>% dplyr::select(-1), 
                             model = Bioclim)
e.Bioclim

str(e.Bioclim)

# roc
plot(e.Bioclim, "ROC")

# auc
e.Bioclim@auc

# find threshold
thr.Bioclim <- dismo::threshold(e.Bioclim)
thr.Bioclim

# tss
id <- which(e.Bioclim@t == thr.Bioclim$spec_sens)
tss <- e.Bioclim@TPR[id] + e.Bioclim@TNR[id] - 1
tss

# TPR: True positive rate
# TNR: True negative rate


## thresholds
# sum of the sensitivity and specificity
thr.Bioclim$spec_sens

ggplot() +
  geom_raster(data = raster::rasterToPoints(enm.Bioclim >= thr.Bioclim$spec_sens) %>% tibble::as_tibble(), 
              aes(x, y, fill = layer)) +
  scale_fill_gradientn(colours = colorRamps::matlab.like2(100)) +
  geom_point(data = pr.sample.train, aes(lon, lat), pch = 20, size = 2.5, alpha = .7) +
  geom_point(data = pr.sample.test, aes(lon, lat), color = "darkgreen", pch = 20, size = 2.5, alpha = .7) +
  theme_minimal()

# no omission
thr.Bioclim$no_omission

ggplot() +
  geom_raster(data = raster::rasterToPoints(enm.Bioclim >= thr.Bioclim$no_omission) %>% tibble::as_tibble(), 
              aes(x, y, fill = layer)) +
  scale_fill_gradientn(colours = rainbow(1)) +
  geom_point(data = pr.sample.train, aes(lon, lat), pch = 20, size = 2.5, alpha = .7) +
  geom_point(data = pr.sample.test, aes(lon, lat), color = "darkgreen", pch = 20, size = 2.5, alpha = .7) +
  theme_minimal()

###---------------------------------------------------------------------------###

## 2. maxent	
# 2.1 calibration
Maxent <- dismo::maxent(x = train %>% dplyr::select(-1), 
                        p = train %>% dplyr::select(1))	
Maxent

plot(Maxent)
response(Maxent)

# 2.2 projection
enm.Maxent <- dismo::predict(var, Maxent, progress = "text") 
enm.Maxent

ggplot() +
  geom_raster(data = raster::rasterToPoints(enm.Maxent) %>% tibble::as_tibble(), 
              aes(x, y, fill = layer)) +
  scale_fill_gradientn(colours = colorRamps::matlab.like2(100)) +
  theme_minimal()

ggplot() +
  geom_raster(data = raster::rasterToPoints(enm.Maxent) %>% tibble::as_tibble(), 
              aes(x, y, fill = layer)) +
  scale_fill_gradientn(colours = colorRamps::matlab.like2(100)) +
  geom_point(data = pr.sample.train, aes(lon, lat), pch = 20, size = 2.5, alpha = .7) +
  theme_minimal()

ggplot() +
  geom_raster(data = raster::rasterToPoints(enm.Maxent) %>% tibble::as_tibble(), 
              aes(x, y, fill = layer)) +
  scale_fill_gradientn(colours = colorRamps::matlab.like2(100)) +
  geom_point(data = pr.sample.test, aes(lon, lat), color = "darkgreen", pch = 20, size = 2.5, alpha = .7) +
  theme_minimal()

# 2.3 evaluation
e.Maxent <- dismo::evaluate(p = test %>% dplyr::filter(pb == 1) %>% dplyr::select(-1), 
                            a = test %>% dplyr::filter(pb == 0) %>% dplyr::select(-1),  
                            model = Maxent)
e.Maxent

# roc
plot(e.Maxent, "ROC")

# auc
e.Maxent@auc

# find threshold
thr.Maxent <- dismo::threshold(e.Maxent)
thr.Maxent

# tss
id <- which(e.Maxent@t == thr.Maxent$spec_sens)
tss <- e.Maxent@TPR[id] + e.Maxent@TNR[id] - 1
tss

## thresholds
# sum of the sensitivity and specificity
thr.Maxent$spec_sens

ggplot() +
  geom_raster(data = raster::rasterToPoints(enm.Maxent >= thr.Maxent$spec_sens) %>% tibble::as_tibble(), 
              aes(x, y, fill = layer)) +
  scale_fill_gradientn(colours = colorRamps::matlab.like2(100)) +
  geom_point(data = pr.sample.train, aes(lon, lat), pch = 20, size = 2.5, alpha = .7) +
  geom_point(data = pr.sample.test, aes(lon, lat), color = "darkgreen", pch = 20, size = 2.5, alpha = .7) +
  theme_minimal()

# no omission
thr.Maxent$no_omission

ggplot() +
  geom_raster(data = raster::rasterToPoints(enm.Maxent >= thr.Maxent$no_omission) %>% tibble::as_tibble(), 
              aes(x, y, fill = layer)) +
  scale_fill_gradientn(colours = colorRamps::matlab.like2(100)) +
  geom_point(data = pr.sample.train, aes(lon, lat), pch = 20, size = 2.5, alpha = .7) +
  geom_point(data = pr.sample.test, aes(lon, lat), color = "darkgreen", pch = 20, size = 2.5, alpha = .7) +
  theme_minimal()

###----------------------------------------------------------------------------###

## 3. glm
# 3.1 calibration
GLM <- glm(pb ~ ., family = binomial(link = "logit"), data = train)

summary(GLM)
response(GLM)

# 3.2 projection
enm.GLM <- dismo::predict(var, GLM, progress = "text") 
enm.GLM

# map
ggplot() +
  geom_raster(data = raster::rasterToPoints(enm.GLM) %>% tibble::as_tibble(), 
              aes(x, y, fill = layer)) +
  scale_fill_gradientn(colours = colorRamps::matlab.like2(100)) +
  theme_minimal()

ggplot() +
  geom_raster(data = raster::rasterToPoints(enm.GLM) %>% tibble::as_tibble(), 
              aes(x, y, fill = layer)) +
  scale_fill_gradientn(colours = colorRamps::matlab.like2(100)) +
  geom_point(data = pr.sample.train, aes(lon, lat), pch = 20, size = 2.5, alpha = .7) +
  theme_minimal()

ggplot() +
  geom_raster(data = raster::rasterToPoints(enm.GLM) %>% tibble::as_tibble(), 
              aes(x, y, fill = layer)) +
  scale_fill_gradientn(colours = colorRamps::matlab.like2(100)) +
  geom_point(data = pr.sample.test, aes(lon, lat), color = "darkgreen", pch = 20, size = 2.5, alpha = .7) +
  theme_minimal()


# 3.3 evaluation
e.GLM <- dismo::evaluate(p = test %>% dplyr::filter(pb == 1) %>% dplyr::select(-1), 
                         a = test %>% dplyr::filter(pb == 0) %>% dplyr::select(-1),
                         model = GLM)
e.GLM

# roc
plot(e.GLM, "ROC")

# auc
e.GLM@auc

# find threshold
thr.GLM <- threshold(e.GLM)
thr.GLM

# tss
id <- which(e.GLM@t == thr.GLM$spec_sens)
tss <- e.GLM@TPR[id] + e.GLM@TNR[id] - 1
tss

## thresholds
# sum of the sensitivity and specificity
thr.GLM$spec_sens

ggplot() +
  geom_raster(data = raster::rasterToPoints(enm.GLM >= thr.GLM$spec_sens) %>% tibble::as_tibble(), 
              aes(x, y, fill = layer)) +
  scale_fill_gradientn(colours = colorRamps::matlab.like2(100)) +
  geom_point(data = pr.sample.train, aes(lon, lat), pch = 20, size = 2.5, alpha = .7) +
  geom_point(data = pr.sample.test, aes(lon, lat), color = "darkgreen", pch = 20, size = 2.5, alpha = .7) +
  theme_minimal()

# no omission
thr.GLM$no_omission

ggplot() +
  geom_raster(data = raster::rasterToPoints(enm.GLM >= thr.GLM$no_omission) %>% tibble::as_tibble(), 
              aes(x, y, fill = layer)) +
  scale_fill_gradientn(colours = colorRamps::matlab.like2(100)) +
  geom_point(data = pr.sample.train, aes(lon, lat), pch = 20, size = 2.5, alpha = .7) +
  geom_point(data = pr.sample.test, aes(lon, lat), color = "darkgreen", pch = 20, size = 2.5, alpha = .7) +
  theme_minimal()

###----------------------------------------------------------------------------###

# comparation
par(mfrow = c(1, 3))

# maxent
plot(enm.Bioclim, main = "Bioclim", col = matlab.like2((100)), legend = FALSE)

# maxent
plot(enm.Maxent, main = "Maxent", col = matlab.like2((100)), legend = FALSE)

# glm
plot(enm.GLM, main = "GLM", col = matlab.like2((100)), legend = FALSE)

###----------------------------------------------------------------------------###

# sum of the sensitivity and specificity

# bioclim
plot(enm.Bioclim >= thr.Bioclim$spec_sens, main = "Bioclim", legend = FALSE)

# maxent
plot(enm.Maxent >= thr.Maxent$spec_sens, main = "Maxent", legend = FALSE)

# glm
plot(enm.GLM >= thr.GLM$spec_sens, main = "GLM", legend = FALSE)

###----------------------------------------------------------------------------###




### script enm dismo - multiple algorithms ###

# mauricio vancine
# 12-12-2018

# memory
rm(list = ls())

# packages
library(colorRamps)
library(dismo)
library(kernlab)
library(randomForest)
library(raster)
library(rJava)
library(tidyverse)
library(viridis)

###---------------------------------------------------------------------------###

## import data
# 1. occ
# directory
setwd("C:/R/modelagem_sp")
dir()

# occurrences
occ <- readr::read_csv("occ_clean_lim_oppc.csv") #troca occurrences.csv por esse
occ

# create shapefile
occ.sh <-  occ %>% 
  sf::st_as_sf(coords = c("lon", "lat"), crs = 4326)
occ.sh

# plot
ggplot() + 
  geom_sf(data = occ.sh, col = "black", size = 2.5, alpha = .4) +
  theme_minimal()

# export shapefile
sf::st_write(occ.sh, "occ.shp")

###---------------------------------------------------------------------------###

##  2. variables
# directory
setwd("C:/R/modelagem_sp/02_selection/04_pca")
dir()

# list files
ti <- dir(patt = ".tif$")
ti

# import rasters
var <- raster::stack(ti)
var

# plot
plot(var, col = viridis::viridis(100))

ggplot() +
  geom_raster(data = raster::rasterToPoints(var[[1]]) %>% tibble::as_tibble(), 
              aes(x, y, fill = pc01)) +
  scale_fill_gradientn(colours = viridis::viridis(100)) +
  geom_point(data = occ, aes(longitude, latitude), size = 2.5, alpha = .4) +
  theme_minimal()

###---------------------------------------------------------------------------###

## extract coordinates for background
# coordinates
## background coordinates
bc <- tibble::as.tibble(raster::rasterToPoints(var)[, 1:2])
bc
colnames(bc) <- c("lon", "lat")
bc

# plot
ggplot() +
  geom_raster(data = raster::rasterToPoints(var[[1]]) %>% tibble::as_tibble(), 
              aes(x, y, fill = pc01)) +
  scale_fill_gradientn(colours = viridis::viridis(100)) +
  geom_point(data = bc %>% dplyr::sample_n(1000), aes(lon, lat), size = 2.5, pch = 15, alpha = .4) +
  theme_minimal()

###---------------------------------------------------------------------------###

# verify maxent
# copy maxent.jar in "C:\Users\Poliana\Documents\R\win-library\3.6\dismo\java"
file.exists(paste0(system.file(package = "dismo"), "/java/maxent.jar"))

###---------------------------------------------------------------------------###

### enms ###
# diretory
setwd("C:/R/modelagem_sp/03_modelos")

#dir.create("02_modelos_multiplos")
setwd("02_modelos_multiplos")
getwd()


# enms

for(i in 1:length(unique(occ[, 1]))){ # for cria loop p cada i specie da linha 1 a length da planilha
  		#as especies precisam estar ordenadas em blocos (aaaa,bbbbb,cccc), não pode deixar misturada (aabcabbcca)achando q o R vai separar
  # graphics
  dir.create("graphics")
  
  # variables for evaluate ->cria uma planilha vazia onde vamos ir colocando os resultados
  eval.Bioclim <- NULL
  eval.Gower <- NULL
  eval.GLM <- NULL
  eval.RandomForest <- NULL
  eval.Maxent <- NULL
  eval.SVM <- NULL
  eval.names <- NULL
  maxent.results <- matrix()
  
  # selecting presence and absence ->
  id.specie <- as.character(unique(occ[, 1]))[i] 	#so temos 1 mas poderiam ser +sp
  pr.specie <- occ[which(occ[, 1] == id.specie), 2:3] #pega o long e lat
  id.background <- sample(nrow(bc), nrow(pr.specie)) 	#n background(0) = npresencas(1)
  bc.specie <- bc[id.background, ]		#ausencias
  
  # for
  for(r in 1:10){	# number of replicas (coloque quantos quises, 10+rapido, mas pode 100, 1000, 10000
    
    ## preparing the models
    # train and test data	
    pr.sample.train <- sample(nrow(pr.specie), round(0.7 * nrow(pr.specie)))
			#define 70porcent dos dados p serem de treino
    bc.sample.train <- sample(nrow(bc.specie), round(0.7 * nrow(bc.specie)))
    train <- na.omit(dismo::prepareData(x = var, 
		p = pr.specie[pr.sample.train, ], 	#esse p contruir o modelo
		b = bc.specie[bc.sample.train, ]))
    test <- na.omit(dismo::prepareData(x = var, #esse p testar(TSS,AUC..)
		p = pr.specie[-pr.sample.train, ], 
		b = bc.specie[-bc.sample.train, ])) #particionou oq nao era treino
    
    
    ### algorithms ###
    
    ## 1. bioclim
    print(paste(id.specie, "Bioclim", ifelse(r < 10, paste0("0", r), r)))
    Bioclim <- dismo::bioclim(train[which(train[, 1] == 1), -1])
			#modelando com bioclim importando so os dados de presenças
    raster::writeRaster(dismo::predict(var, Bioclim, progress = "text"), paste0("bioclim_", id.specie, ifelse(r < 10, paste0("0", r), r), ".tif"), options = c("COMPRESS=DEFLATE"), format = "GTiff")
			#salvando prediçoes 
			#se repete essa linha poderia salvar com var.fur e bioclim_futuro)
    eBioclim <- dismo::evaluate(p = test[test[, 1] == 1, -1], a = test[test[, 1] == 0, -1], model = Bioclim)
			#avaliando o modelo (sensitividade+especitividade-1)
    idBioclim <- which(eBioclim@t == as.numeric(threshold(eBioclim, "spec_sens")))
			#threshold? spec_sens=maxima espec e sens; se usar no_omission=LPT valor de corte +baixo 
    eval.Bioclim.sp <- c(id.specie, ifelse(r < 10, paste0("0", r), r), "bioclim", eBioclim@t[idBioclim], eBioclim@auc, (eBioclim@TPR[idBioclim] + eBioclim@TNR[idBioclim] - 1))
    eval.Bioclim <- rbind(eval.Bioclim, eval.Bioclim.sp)
    
    setwd("graphics") #entra na pasta
    tiff(paste0("bioclim_response_", id.specie, ifelse(r < 10, paste0("0", r), r), ".tif")); dismo::response(Bioclim); dev.off()
    tiff(paste0("bioclim_auc_", id.specie, ifelse(r < 10, paste0("0", r), r), ".tif")); plot(eBioclim, "ROC"); dev.off()
    setwd("..") 		#saindo, volta uma pasta,
    
    
    ## 2. gower #faz a mesma coisa, so muda funcao
    print(paste(id.specie, "Gower", ifelse(r < 10, paste0("0", r), r)))
    Gower <- dismo::domain(train[which(train[, 1] == 1), -1])	
    raster::writeRaster(dismo::predict(var, Gower, progress = "text"), paste0("gower_", id.specie, ifelse(r < 10, paste0("0", r), r), ".tif"), options = c("COMPRESS=DEFLATE"), format = "GTiff") 
    eGower <- dismo::evaluate(p = test[test[, 1] == 1, -1], a = test[test[, 1] == 0, -1], model = Gower)
    idGower <- which(eGower@t == as.numeric(threshold(eGower, "spec_sens")))
    eval.Gower.sp <- c(id.specie, ifelse(r < 10, paste0("0", r), r), "gower", eGower@t[idGower], eGower@auc, (eGower@TPR[idGower] + eGower@TNR[idGower] - 1))
    eval.Gower <- rbind(eval.Gower, eval.Gower.sp)
    
    setwd("graphics")
    tiff(paste0("gower_response_", id.specie, ifelse(r < 10, paste0("0", r), r), ".tif")); dismo::response(Gower); dev.off()
    tiff(paste0("gower_auc_", id.specie, ifelse(r < 10, paste0("0", r), r), ".tif")); plot(eGower, "ROC"); dev.off()
    setwd("..")
    
    
    ## 3. glm
    print(paste(id.specie, "GLM", ifelse(r < 10, paste0("0", r), r)))
    GLM <- glm(pb ~ ., data = train)	
    raster::writeRaster(dismo::predict(var, GLM, progress = "text"), paste0("glm_", id.specie, ifelse(r < 10, paste0("0", r), r), ".tif"), options = c("COMPRESS=DEFLATE"), format = "GTiff") 
    eGLM <- dismo::evaluate(p = test[test[, 1] == 1, -1], a = test[test[, 1] == 0, -1], model = GLM)
    idGLM <- which(eGLM@t == as.numeric(threshold(eGLM, "spec_sens")))
    eval.GLM.sp <- c(id.specie, ifelse(r < 10, paste0("0", r), r), "glm", eGLM@t[idGLM], eGLM@auc, (eGLM@TPR[idGLM] + eGLM@TNR[idGLM] - 1))
    eval.GLM <- rbind(eval.GLM, eval.GLM.sp)
    
    setwd("graphics")
    tiff(paste0("glm_response_", id.specie, ifelse(r < 10, paste0("0", r), r), ".tif")); dismo::response(GLM); dev.off()
    tiff(paste0("glm_auc_", id.specie, ifelse(r < 10, paste0("0", r), r), ".tif")); plot(eGLM, "ROC"); dev.off()
    setwd("..")
    
    
    ## 4. random forest
    print(paste(id.specie, "Random Forest", ifelse(r < 10, paste0("0", r), r)))
    RandomForest <- randomForest::randomForest(pb ~ ., data = train)
    writeRaster(dismo::predict(var, RandomForest, progress = "text"), paste0("randomforest_", id.specie, ifelse(r < 10, paste0("0", r), r), ".tif"), options = c("COMPRESS=DEFLATE"), format = "GTiff") 
    eRandomForest <- dismo::evaluate(p = test[test[, 1] == 1, -1], a = test[test[, 1] == 0, -1], model = RandomForest)
    idRandomForest <- which(eRandomForest@t == as.numeric(threshold(eRandomForest, "spec_sens")))
    eval.RandomForest.sp <- c(id.specie, ifelse(r < 10, paste0("0", r), r), "randomforest", eRandomForest@t[idRandomForest], eRandomForest@auc, (eRandomForest@TPR[idRandomForest] + eRandomForest@TNR[idRandomForest] - 1))
    eval.RandomForest <- rbind(eval.RandomForest, eval.RandomForest.sp)
    
    setwd("graphics")
    tiff(paste0("randomforest_auc_", id.specie, ifelse(r < 10, paste0("0", r), r), ".tif")); plot(eRandomForest, "ROC"); dev.off()
    setwd("..")
    
    
    ## 5. maxent	
    print(paste(id.specie, "Maxent", ifelse(r < 10, paste0("0", r), r)))
    Maxent <- dismo::maxent(train[, -1], train[, 1])	
    raster::writeRaster(dismo::predict(var, Maxent, progress = "text"), paste0("maxent_", id.specie, ifelse(r < 10, paste0("0", r), r), ".tif"), options = c("COMPRESS=DEFLATE"), format = "GTiff") 
    eMaxent <- dismo::evaluate(p = test[test[, 1] == 1, -1], a = test[test[, 1] == 0, -1], model = Maxent)
    idMaxent <- which(eMaxent@t == as.numeric(threshold(eMaxent, "spec_sens")))
    eval.Maxent.sp <- c(id.specie, ifelse(r < 10, paste0("0", r), r), "maxent", eMaxent@t[idMaxent], eMaxent@auc, (eMaxent@TPR[idMaxent] + eMaxent@TNR[idMaxent] - 1))
    eval.Maxent <- rbind(eval.Maxent, eval.Maxent.sp)
    
    setwd("graphics")
    tiff(paste0("maxent_response_",  id.specie, ifelse(r < 10, paste0("0", r), r), ".tif")); dismo::response(Maxent); dev.off()
    tiff(paste0("maxent_contribution_",  id.specie, ifelse(r < 10, paste0("0", r), r), ".tif")); plot(Maxent); dev.off()
    tiff(paste0("maxent_auc_",  id.specie, ifelse(r < 10, paste0("0", r), r), ".tif")); plot(eMaxent, "ROC"); dev.off()
    maxent.results <- tibble::as.tibble(data.frame(maxent.results, as.matrix(Maxent@results)))
    setwd("..")
    
    
    ## 6. svm	
    print(paste(id.specie, "SVM", ifelse(r < 10, paste0("0", r), r)))
    SVM <- kernlab::ksvm(pb ~ ., data = train)
    raster::writeRaster(dismo::predict(var, SVM, progress = "text"), paste0("svm_", id.specie, ifelse(r < 10, paste0("0", r), r), ".tif"), options = c("COMPRESS=DEFLATE"), format = "GTiff") 
    eSVM <- dismo::evaluate(p = test[test[, 1] == 1, -1], a = test[test[, 1] == 0, -1], model = SVM)
    idSVM <- which(eSVM@t == as.numeric(threshold(eSVM, "spec_sens")))
    eval.SVM.sp <- c(id.specie, ifelse(r < 10, paste0("0", r), r), "svm", eSVM@t[idSVM], eSVM@auc, (eSVM@TPR[idSVM] + eSVM@TNR[idSVM] - 1))
    eval.SVM <- rbind(eval.SVM, eval.SVM.sp)
    
    setwd("graphics")
    tiff(paste0("svm_auc_", id.specie, ifelse(r < 10, paste0("0", r), r), ".tif")); plot(eSVM, "ROC"); dev.off()
    setwd("..")
    
    
    eval.names <- c(eval.names, paste0(id.specie, ifelse(r < 10, paste0("0", r), r)))	
    
  } # ends for "r"
  
  # maxent results
  setwd("graphics")
  na <- attributes(Maxent@results)[[2]][[1]]
  maxent.results <- tibble::as.tibble(data.frame(na, maxent.results[, -1]))
  colnames(maxent.results) <- c("names", paste0("rep", 1:r))
  readr::write_csv(maxent.results, paste0("_maxent_results", id.specie, ".csv"))
  setwd("..")
  
  # evaluations
  dimnames(eval.Bioclim) <- list(eval.names, c("species", "replica", "algorithm", "thrs", "AUC", "TSS"))
  dimnames(eval.Gower) <- list(eval.names, c("species", "replica", "algorithm", "thrs", "AUC", "TSS"))  
  dimnames(eval.GLM) <- list(eval.names, c("species", "replica", "algorithm", "thrs", "AUC", "TSS"))  
  dimnames(eval.RandomForest) <- list(eval.names, c("species", "replica", "algorithm", "thrs", "AUC", "TSS"))
  dimnames(eval.Maxent) <- list(eval.names, c("species", "replica", "algorithm", "thrs", "AUC", "TSS"))
  dimnames(eval.SVM) <- list(eval.names, c("species", "replica", "algorithm", "thrs", "AUC", "TSS"))
  
  write.csv(eval.Bioclim, paste0("zEval_", "bioclim_", id.specie, ".csv"))
  write.csv(eval.Gower, paste0("zEval_", "gower_", id.specie, ".csv"))
  write.csv(eval.GLM, paste0("zEval_", "glm_", id.specie, ".csv"))
  write.csv(eval.RandomForest, paste0("zEval_", "randomforest_", id.specie, ".csv"))
  write.csv(eval.Maxent, paste0("zEval_", "maxent_", id.specie, ".csv"))
  write.csv(eval.SVM, paste0("zEval_", "svm_", id.specie, ".csv"))
  
} # ends for"i"

###----------------------------------------------------------------------------###



### script frequency ensemble ###

# MaurÃ­cio Vancine
# 13-12-2018

###----------------------------------------------------------------------------###

# memory
rm(list = ls())

# packages
library(colorRamps)
library(raster)
library(tidyverse)

# list packages
search()

###----------------------------------------------------------------------------###

# import data
# directory
setwd("C:/R/modelagem_sp/03_modelos/02_modelos_multiplos")

# enms
tif <- dir(patt = ".tif$")
tif

enm <- raster(tif[[1]])
enm

plot(enm, main = names(enm), col = colorRamps::matlab.like2(100))

# import evaluates
csv <- purrr::map_dfr(dir(patt = ".csv"), readr::read_csv)
csv
str(csv)

###----------------------------------------------------------------------------###

## frequency ensemble 
# species : se tivessem varias sp
sp <- csv %>% 
  dplyr::select(species) %>% #pegarias os nomes das especies para ser selecionada
  dplyr::distinct() %>% 
  dplyr::pull()
sp

# algorithms
al <- csv %>% 
  dplyr::select(algorithm) %>% 
  dplyr::distinct() %>%
  dplyr::pull() %>% 
  stringr::str_replace("_", "")
al

# ensembles
ens <- enm 
ens[] <- 0 #contar celulas com 0
ens
plot(ens)

# directory
#dir.create("00_ensemble_freq")

# for
for(i in sp){
  
  # select model by species
  tif.sp <- grep(i, tif, value = TRUE)  #grep=seleciona arquivo, rasters da sp
  eva.sp <- csv %>% dplyr::filter(species == i) #filtrar por nome da especie
  
  # information
  print(paste0("The ensemble for ", i, " started, relax, take a coffee, it may take awhile..."))
  
  
  for(j in al){ #para ir rolando cada sp por algoritmo
    
    # select model by algorithms
    tif.al <- grep(j, tif.sp, value = TRUE)	#agora eh pra selecionar so o algoritmo pra sp
    eva.al <- eva.sp %>% dplyr::filter(algorithm == j)
    
    # information
    print(paste0("The ensemble for '", i, "', algorithm '", j, "' are going!"))
    
    # import raster
    enm.al <- stack(tif.al)
    
    
    for(k in seq(length(tif.al))){ 	#k=replicas
      
      # sum #ens=planilha vazia #threshold=coluna 5 
      ens <- sum(ens, enm.al[[k]] >= eva.al[k, 5] %>% dplyr::pull())
      		#soma tudo q for maior ou igual ao threshold
    }
    
  }
  
  # export
  setwd("00_ensemble_freq")
  writeRaster(ens / (length(tif.sp)), paste0("ensemble_freq_", i, ".tif"), 
              options = c("COMPRESS=DEFLATE"), format = "GTiff", overwrite = TRUE)
  setwd("..")
  
  # information
  print(paste0("Nice! The ensemble of ", i, " it's done!"))
  
  
  ens[] <- 0
  
  print("Yeh! It's over!!!")
  
}

###----------------------------------------------------------------------------###

# directory
setwd("00_ensemble_freq")

# import
mo <- stack(dir(patt = ".tif"))
mo

# map
# occurrences
setwd("C:/R/modelag2019")

occ <- readr::read_csv("occ_clean_lim_oppc.csv") %>% #trocou occ_haddadus_binotatus_oppc.csv
  dplyr::filter(name == "haddadus_binotatus")
occ

ggplot() +
  geom_raster(data = raster::rasterToPoints(mo) %>% tibble::as_tibble(), 
              aes(x, y, fill = ensemble_freq_haddadus_binotatus)) +
  scale_fill_gradientn(colours = colorRamps::matlab.like2(100)) +
 # geom_point(data = occ, aes(lon, lat), size = 2, alpha = .7) +
  theme_minimal() +
  theme(legend.title = element_blank())
###----------------------------------------------------------------------------###













# memory
rm(list = ls())
setwd('C:/R/modelagem_sp/projeto')

#### script 02 - Variáveis ambientais climáticas

# download presente e futuro
var <- raster::getData(name = "worldclim", var = "bio", res = 10)
var.f <-raster::getData('CMIP5', var='bio', res=10, rcp=85, model='CC', year=70) 
		#CMIP5=cenarios de previsao futuro, var=variaveis bio climaticas, 
		#res=resolucao de 10 minutos, rcp=modelo utilizado, 85 é o +catastrófico
		#model=AC ou CC
var		#presente
var.f		#FUTURO names: cc(modelo usado)bi(bioclimaticas)70(ano)3(qual variavel)

# renomeia dados
names(var)
names(var) <- c(paste0("pres_bio0", 1:9), paste0("pres_bio", 10:19))
names(var) #mudou o nome adicionando que é pres_
var

#names future
names(var.f)
names(var.f) <- c(paste0("future_bio0", 1:9), paste0("future_bio", 10:19))
names(var.f)
var.f

## bioclimates
# BIO01 = Temperatura media anual
# BIO02 = Variacao da media diurna (media por mes (temp max - temp min))
# #BIO03 = Isotermalidade (BIO02/BIO07) (* 100)
# BIO04 = Sazonalidade da temperatura (desvio padrao deviation *100)
# BIO05 = Temperatura maxima do mes mais quente
# BIO06 = Temperatura minima do mes mais frio
# #BIO07 = Variacao da temperatura anual (BIO5-BIO6)
# BIO08 = Temperatura media do trimestre mais chuvoso
# BIO09 = Temperatura media do trimestre mais seco
# #BIO10 = Temperatura media do trimestre mais quente
# BIO11 = Temperatura media do trimestre mais frio
# BIO12 = Precipitacao anual
# BIO13 = Precipitacao do mes mais chuvoso
# BIO14 = Precipitacao do mes mais seco
# BIO15 = Sazonalidade da precipitacao (coeficiente de variacao)
# #BIO16 = Precipitacao do trimestre mais chuvoso
# #BIO17 = Precipitacao do trimestre mais seco
# BIO18 = Precipitacao do trimestre mais quente
# BIO19 = Precipitacao do trimestre mais frio


## script02. Ajustar os limites os rasters daa variaveis para o nordeste
# crop
library(colorRamps)
library(raster)
library(sf)
library(tidyverse)

setwd('C:/R/modelagem_sp/projeto')

#cortando presente
ne = shapefile("Nordeste_SIRGAS2000_IBGE_2017.shp") #coloca "nome do arquivo"
var.ne <- raster::crop(var, ne) %>% 
  raster::mask(ne)
var.ne


#cortando futuro
	
var.ne.f <- raster::crop(var.f, ne) %>% 
  raster::mask(ne)
var.ne.f

# plot
raster::plot(var.ne)
raster::plot(var.ne.f)

# export pra poderes abrir em QGIS
raster::writeRaster(x = var.ne, filename = names(var.ne), bylayer = TRUE, 
                    options = c("COMPRESS=DEFLATE"), format = "GTiff", overwrite = TRUE)

raster::writeRaster(x = var.ne.f, filename = names(var.ne.f), bylayer = TRUE, 
                    options = c("COMPRESS=DEFLATE"), format = "GTiff", overwrite = TRUE)


# erase folder = como ja salvamos, poupar processamento:
unlink("wc10", recursive = TRUE, force = TRUE)
unlink("cmip5", recursive = TRUE, force = TRUE)


#### script 03 Organizar dados de ocorrencia #################################

setwd("C:/R/modelagem_sp/projeto")
dir()

# occurrences
#nao sei pq, nao consegui puxar os dados csv
# usei esse codigo que prefiro, é assim você copia os tados da tabela, 
#e da entre nesse codigo, nao falha
occ<-read.table(file = "clipboard", sep = "\t", header=TRUE)
occ
str(occ)


#script 05 - transformar tabela de ocorrencia em shapefile

# create shapefile
occ.sh <-  occ %>% 
  sf::st_as_sf(coords = c("longitude", "latitude"), crs = 4326)
occ.sh

# plot
ggplot() + 
  geom_sf(data = occ.sh, col = "black", size = 2.5, alpha = .4) +
  theme_minimal()

# export shapefile
sf::st_write(occ.sh, "occ.shp")



### script04 - Selecao das variaveis  ########################################3

library(caret) #machine learning
library(colorRamps) 
#library(corrplot) #plot de correlação
#library(factoextra) #pca
#library(FactoMineR) #pca
#library(RStoolbox) #pca com raster
library(psych) #analise fatorial
library(raster) 
library(tidyverse) #tabelas e sintaxes
library(usdm)#vif
library(viridis) #paleta de cores

setwd('C:/R/modelagem_sp/projeto')
dir()

# list variables
ti <- dir(pattern = ".tif") #lista os rasters
ti

pres <- grep("pres", ti, value=T) #lista os do presente 
fut <- grep("future", ti, value=T) #lista os do futuro

# import rasters
var.p <- raster::stack(pres)
var.p
plot(var.p[[1:4]], col = colorRamps::matlab.like2(100))

### import raster future
var.f <- raster::stack(fut)
var.f
plot(var.f[[1:4]], col = colorRamps::matlab.like2(100))


# extract values
var.da <- var.p %>% 	#extraindo os valores do raster do presente
  raster::values() %>% 	#sair do geografico para usar só o ambiental
  na.omit

# extract values
var.f.da <- var.f %>% 	#extraindo os valores do raster do futuro
  raster::values() %>% 	#sair do geografico para usar só o ambiental
  na.omit

# verify
head(var.da)
dim(var.da)

###---------------------------------------------------------------------------------------###

# script04. factorial analysis -melhor p analises temporais

# back one directory
setwd("C:/R/modelagem_sp/projeto")

# preliminaries analysis
# kmo e bartlett ->nao sei oq eh
KMO(cor(var.da)) # > 0.5
cortest.bartlett(cor(var.da), n = nrow(var.da)) # p < 0.05

# screeplot - analise paralela para selecionar quantos fatores sao importantes
psych::fa.parallel(var.da, fa = "fa")

# exportar screeplot ->nao sei pra q tbm
png("screeplot_fatorial.tif", wi = 20, he = 15, un = "cm", res = 300)
psych::fa.parallel(var.da, fa = "fa") 
dev.off()

# fatorial ->coloca 1 fator a + da quantidade de fatores selecionados na analise paralela
fa.6 <- psych::fa(var.da, nfactors = 6, rotate = "varimax")
fa.6

# loadings
fa.6$loadings

# export
write.csv(fa.6$loadings %>% abs %>% round(2), "fa_6_loadings.csv")
#olhamos literalmente o maioir valor de cada coluna

pres_bio03; pres_bio07; pres_bio10; pres_bio16; pres_bio17


####### Daqui vamos modelar com scrip 5 ou 6
library(colorRamps)
library(dismo)
library(kernlab)
library(randomForest)
library(raster)
library(rJava)
library(tidyverse)
library(viridis)


############  Variaveis a modelar ###########################
# directory
setwd("C:/R/modelagem_sp/projeto/presente")
dir()

# list files
ti.p <- dir(patt = ".tif$")
ti.p

# import rasters
var <- raster::stack(ti.p)
var

# plot
plot(var, col = viridis::viridis(100))

ggplot() +
  geom_raster(data = raster::rasterToPoints(var[[1]]) %>% tibble::as_tibble(), 
              aes(x, y, fill = pres_bio03)) +
  scale_fill_gradientn(colours = viridis::viridis(100)) +
  geom_point(data = occ, aes(longitude, latitude), size = 2.5, alpha = .4) +
  theme_minimal()


# directory
setwd("C:/R/modelagem_sp/projeto/futuro")
dir()
# list files
ti.f <- dir(patt = ".tif$")
ti.f

# import rasters
var.f <- raster::stack(ti.f)
var.f

# plot
plot(var.f, col = viridis::viridis(100))

ggplot() +
  geom_raster(data = raster::rasterToPoints(var.f[[1]]) %>% tibble::as_tibble(), 
              aes(x, y, fill = future_bio03)) +
  scale_fill_gradientn(colours = viridis::viridis(100)) +
  geom_point(data = occ, aes(longitude, latitude), size = 2.5, alpha = .4) +
  theme_minimal()


############ extract coordinates for background
# coordinates
## background coordinates
bc <- tibble::as.tibble(raster::rasterToPoints(var)[, 1:2])
bc
colnames(bc) <- c("lon", "lat")
bc

# plot
ggplot() +
  geom_raster(data = raster::rasterToPoints(var[[1]]) %>% tibble::as_tibble(), 
              aes(x, y, fill = pres_bio03)) +
  scale_fill_gradientn(colours = viridis::viridis(100)) +
  geom_point(data = bc %>% dplyr::sample_n(1000), aes(lon, lat), size = 2.5, pch = 15, alpha = .4) +
  theme_minimal()



############  Modelar (com todos menos o maxent)
setwd("C:/R/modelagem_sp/projeto/resultados")
names(var) <- names(var.f) #pras analises temporais os names dentro dos rasters tem q ser = 

for(i in 1:length(unique(occ[, 1]))){ # for cria loop p cada i specie da linha 1 a length da planilha
  		#as especies precisam estar ordenadas em blocos (aaaa,bbbbb,cccc), não pode deixar misturada (aabcabbcca)achando q o R vai separar
  # graphics
  dir.create("graphics")
  
  # variables for evaluate ->cria uma planilha vazia onde vamos ir colocando os resultados
  eval.Bioclim <- NULL
  eval.Gower <- NULL
  eval.GLM <- NULL
  eval.RandomForest <- NULL
 # eval.Maxent <- NULL
  eval.SVM <- NULL
  eval.names <- NULL
 # maxent.results <- matrix()
  
  # selecting presence and absence ->
  id.specie <- as.character(unique(occ[, 1]))[i] 	#so temos 1 mas poderiam ser +sp
  pr.specie <- occ[which(occ[, 1] == id.specie), 2:3] #pega o long e lat
  id.background <- sample(nrow(bc), nrow(pr.specie)) 	#n background(0) = npresencas(1)
  bc.specie <- bc[id.background, ]		#ausencias
  
  # for
  for(r in 1:10){	# number of replicas (coloque quantos quises, 10+rapido, mas pode 100, 1000, 10000
    
    ## preparing the models
    # train and test data	
    pr.sample.train <- sample(nrow(pr.specie), round(0.7 * nrow(pr.specie)))
			#define 70porcent dos dados p serem de treino
    bc.sample.train <- sample(nrow(bc.specie), round(0.7 * nrow(bc.specie)))
    train <- na.omit(dismo::prepareData(x = var, 
		p = pr.specie[pr.sample.train, ], 	#esse p contruir o modelo
		b = bc.specie[bc.sample.train, ]))
    test <- na.omit(dismo::prepareData(x = var, #esse p testar(TSS,AUC..)
		p = pr.specie[-pr.sample.train, ], 
		b = bc.specie[-bc.sample.train, ])) #particionou oq nao era treino
    
    
    ### algorithms ###
    
    ## 1. bioclim
    print(paste(id.specie, "Bioclim", ifelse(r < 10, paste0("0", r), r)))
    Bioclim <- dismo::bioclim(train[which(train[, 1] == 1), -1])
			#modelando com bioclim importando so os dados de presenças
    raster::writeRaster(dismo::predict(var, Bioclim, progress = "text"), paste0("bioclim_", id.specie, ifelse(r < 10, paste0("0", r), r), ".tif"), options = c("COMPRESS=DEFLATE"), format = "GTiff")
	raster::writeRaster(dismo::predict(var.f, Bioclim, progress = "text"), paste0("bioclim_futuro", id.specie, ifelse(r < 10, paste0("0", r), r), ".tif"), options = c("COMPRESS=DEFLATE"), format = "GTiff")	
		#salvando prediçoes 
			#se repete essa linha poderia salvar com var.fur e bioclim_futuro)
    eBioclim <- dismo::evaluate(p = test[test[, 1] == 1, -1], a = test[test[, 1] == 0, -1], model = Bioclim)
			#avaliando o modelo (sensitividade+especitividade-1)
    idBioclim <- which(eBioclim@t == as.numeric(threshold(eBioclim, "spec_sens")))
			#threshold? spec_sens=maxima espec e sens; se usar no_omission=LPT valor de corte +baixo 
    eval.Bioclim.sp <- c(id.specie, ifelse(r < 10, paste0("0", r), r), "bioclim", eBioclim@t[idBioclim], eBioclim@auc, (eBioclim@TPR[idBioclim] + eBioclim@TNR[idBioclim] - 1))
    eval.Bioclim <- rbind(eval.Bioclim, eval.Bioclim.sp)
    
    setwd("graphics") #entra na pasta
    tiff(paste0("bioclim_response_", id.specie, ifelse(r < 10, paste0("0", r), r), ".tif")); dismo::response(Bioclim); dev.off()
    tiff(paste0("bioclim_auc_", id.specie, ifelse(r < 10, paste0("0", r), r), ".tif")); plot(eBioclim, "ROC"); dev.off()
    setwd("..") 		#saindo, volta uma pasta,
    
    
    ## 2. gower #faz a mesma coisa, so muda funcao
    print(paste(id.specie, "Gower", ifelse(r < 10, paste0("0", r), r)))
    Gower <- dismo::domain(train[which(train[, 1] == 1), -1])	
    raster::writeRaster(dismo::predict(var, Gower, progress = "text"), paste0("gower_", id.specie, ifelse(r < 10, paste0("0", r), r), ".tif"), options = c("COMPRESS=DEFLATE"), format = "GTiff") 
    raster::writeRaster(dismo::predict(var.f, Gower, progress = "text"), paste0("gower_futuro", id.specie, ifelse(r < 10, paste0("0", r), r), ".tif"), options = c("COMPRESS=DEFLATE"), format = "GTiff") 
	eGower <- dismo::evaluate(p = test[test[, 1] == 1, -1], a = test[test[, 1] == 0, -1], model = Gower)
    idGower <- which(eGower@t == as.numeric(threshold(eGower, "spec_sens")))
    eval.Gower.sp <- c(id.specie, ifelse(r < 10, paste0("0", r), r), "gower", eGower@t[idGower], eGower@auc, (eGower@TPR[idGower] + eGower@TNR[idGower] - 1))
    eval.Gower <- rbind(eval.Gower, eval.Gower.sp)
    
    setwd("graphics")
    tiff(paste0("gower_response_", id.specie, ifelse(r < 10, paste0("0", r), r), ".tif")); dismo::response(Gower); dev.off()
    tiff(paste0("gower_auc_", id.specie, ifelse(r < 10, paste0("0", r), r), ".tif")); plot(eGower, "ROC"); dev.off()
    setwd("..")
    
    
    ## 3. glm
    print(paste(id.specie, "GLM", ifelse(r < 10, paste0("0", r), r)))
    GLM <- glm(pb ~ ., data = train)	
    raster::writeRaster(dismo::predict(var, GLM, progress = "text"), paste0("glm_", id.specie, ifelse(r < 10, paste0("0", r), r), ".tif"), options = c("COMPRESS=DEFLATE"), format = "GTiff") 
	raster::writeRaster(dismo::predict(var.f, GLM, progress = "text"), paste0("glm_futuro", id.specie, ifelse(r < 10, paste0("0", r), r), ".tif"), options = c("COMPRESS=DEFLATE"), format = "GTiff") 
    eGLM <- dismo::evaluate(p = test[test[, 1] == 1, -1], a = test[test[, 1] == 0, -1], model = GLM)
    idGLM <- which(eGLM@t == as.numeric(threshold(eGLM, "spec_sens")))
    eval.GLM.sp <- c(id.specie, ifelse(r < 10, paste0("0", r), r), "glm", eGLM@t[idGLM], eGLM@auc, (eGLM@TPR[idGLM] + eGLM@TNR[idGLM] - 1))
    eval.GLM <- rbind(eval.GLM, eval.GLM.sp)
    
    setwd("graphics")
    tiff(paste0("glm_response_", id.specie, ifelse(r < 10, paste0("0", r), r), ".tif")); dismo::response(GLM); dev.off()
    tiff(paste0("glm_auc_", id.specie, ifelse(r < 10, paste0("0", r), r), ".tif")); plot(eGLM, "ROC"); dev.off()
    setwd("..")
    
    
    ## 4. random forest
    print(paste(id.specie, "Random Forest", ifelse(r < 10, paste0("0", r), r)))
    RandomForest <- randomForest::randomForest(pb ~ ., data = train)
    writeRaster(dismo::predict(var, RandomForest, progress = "text"), paste0("randomforest_", id.specie, ifelse(r < 10, paste0("0", r), r), ".tif"), options = c("COMPRESS=DEFLATE"), format = "GTiff")
	writeRaster(dismo::predict(var.f, RandomForest, progress = "text"), paste0("randomforest_futuro", id.specie, ifelse(r < 10, paste0("0", r), r), ".tif"), options = c("COMPRESS=DEFLATE"), format = "GTiff") 
    eRandomForest <- dismo::evaluate(p = test[test[, 1] == 1, -1], a = test[test[, 1] == 0, -1], model = RandomForest)
    idRandomForest <- which(eRandomForest@t == as.numeric(threshold(eRandomForest, "spec_sens")))
    eval.RandomForest.sp <- c(id.specie, ifelse(r < 10, paste0("0", r), r), "randomforest", eRandomForest@t[idRandomForest], eRandomForest@auc, (eRandomForest@TPR[idRandomForest] + eRandomForest@TNR[idRandomForest] - 1))
    eval.RandomForest <- rbind(eval.RandomForest, eval.RandomForest.sp)
    
    setwd("graphics")
    tiff(paste0("randomforest_auc_", id.specie, ifelse(r < 10, paste0("0", r), r), ".tif")); plot(eRandomForest, "ROC"); dev.off()
    setwd("..")
    
    
    ## 5. maxent	
    #print(paste(id.specie, "Maxent", ifelse(r < 10, paste0("0", r), r)))
    #Maxent <- dismo::maxent(train[, -1], train[, 1])	
    #raster::writeRaster(dismo::predict(var, Maxent, progress = "text"), paste0("maxent_", id.specie, ifelse(r < 10, paste0("0", r), r), ".tif"), options = c("COMPRESS=DEFLATE"), format = "GTiff") 
    #eMaxent <- dismo::evaluate(p = test[test[, 1] == 1, -1], a = test[test[, 1] == 0, -1], model = Maxent)
    #idMaxent <- which(eMaxent@t == as.numeric(threshold(eMaxent, "spec_sens")))
    #eval.Maxent.sp <- c(id.specie, ifelse(r < 10, paste0("0", r), r), "maxent", eMaxent@t[idMaxent], eMaxent@auc, (eMaxent@TPR[idMaxent] + eMaxent@TNR[idMaxent] - 1))
    #eval.Maxent <- rbind(eval.Maxent, eval.Maxent.sp)
    
    #setwd("graphics")
    #tiff(paste0("maxent_response_",  id.specie, ifelse(r < 10, paste0("0", r), r), ".tif")); dismo::response(Maxent); dev.off()
    #tiff(paste0("maxent_contribution_",  id.specie, ifelse(r < 10, paste0("0", r), r), ".tif")); plot(Maxent); dev.off()
    #tiff(paste0("maxent_auc_",  id.specie, ifelse(r < 10, paste0("0", r), r), ".tif")); plot(eMaxent, "ROC"); dev.off()
    #maxent.results <- tibble::as.tibble(data.frame(maxent.results, as.matrix(Maxent@results)))
    #setwd("..")
    
    
    ## 6. svm	
    print(paste(id.specie, "SVM", ifelse(r < 10, paste0("0", r), r)))
    SVM <- kernlab::ksvm(pb ~ ., data = train)
    raster::writeRaster(dismo::predict(var, SVM, progress = "text"), paste0("svm_", id.specie, ifelse(r < 10, paste0("0", r), r), ".tif"), options = c("COMPRESS=DEFLATE"), format = "GTiff") 
    raster::writeRaster(dismo::predict(var.f, SVM, progress = "text"), paste0("svm_futuro", id.specie, ifelse(r < 10, paste0("0", r), r), ".tif"), options = c("COMPRESS=DEFLATE"), format = "GTiff") 
   	eSVM <- dismo::evaluate(p = test[test[, 1] == 1, -1], a = test[test[, 1] == 0, -1], model = SVM)
    idSVM <- which(eSVM@t == as.numeric(threshold(eSVM, "spec_sens")))
    eval.SVM.sp <- c(id.specie, ifelse(r < 10, paste0("0", r), r), "svm", eSVM@t[idSVM], eSVM@auc, (eSVM@TPR[idSVM] + eSVM@TNR[idSVM] - 1))
    eval.SVM <- rbind(eval.SVM, eval.SVM.sp)
    
    setwd("graphics")
    tiff(paste0("svm_auc_", id.specie, ifelse(r < 10, paste0("0", r), r), ".tif")); plot(eSVM, "ROC"); dev.off()
    setwd("..")
    
    
    eval.names <- c(eval.names, paste0(id.specie, ifelse(r < 10, paste0("0", r), r)))	
    
  } # ends for "r"
  
  # maxent results
  #setwd("graphics")
  #na <- attributes(Maxent@results)[[2]][[1]]
  #maxent.results <- tibble::as.tibble(data.frame(na, maxent.results[, -1]))
  #colnames(maxent.results) <- c("names", paste0("rep", 1:r))
  #readr::write_csv(maxent.results, paste0("_maxent_results", id.specie, ".csv"))
  #setwd("..")
  
  # evaluations
  dimnames(eval.Bioclim) <- list(eval.names, c("species", "replica", "algorithm", "thrs", "AUC", "TSS"))
  dimnames(eval.Gower) <- list(eval.names, c("species", "replica", "algorithm", "thrs", "AUC", "TSS"))  
  dimnames(eval.GLM) <- list(eval.names, c("species", "replica", "algorithm", "thrs", "AUC", "TSS"))  
  dimnames(eval.RandomForest) <- list(eval.names, c("species", "replica", "algorithm", "thrs", "AUC", "TSS"))
  #dimnames(eval.Maxent) <- list(eval.names, c("species", "replica", "algorithm", "thrs", "AUC", "TSS"))
  dimnames(eval.SVM) <- list(eval.names, c("species", "replica", "algorithm", "thrs", "AUC", "TSS"))
  
  write.csv(eval.Bioclim, paste0("zEval_", "bioclim_", id.specie, ".csv"))
  write.csv(eval.Gower, paste0("zEval_", "gower_", id.specie, ".csv"))
  write.csv(eval.GLM, paste0("zEval_", "glm_", id.specie, ".csv"))
  write.csv(eval.RandomForest, paste0("zEval_", "randomforest_", id.specie, ".csv"))
  #write.csv(eval.Maxent, paste0("zEval_", "maxent_", id.specie, ".csv"))
  write.csv(eval.SVM, paste0("zEval_", "svm_", id.specie, ".csv"))
  
} # ends for"i"


########### script07 Ensemble de frequencia  - combinar os varios modelos

library(colorRamps)
library(raster)
library(tidyverse)

# list packages
search()

###----------------------------------------------------------------------------###
######## ANTES DE  TUDO: pegue todos os mapas com futuro no nome mova para uma outra pasta
############ aproveite e já copie e cole (nao corte), as tabelas .csv tbm para essa pasta futuro


setwd("C:/R/modelagem_sp/projeto/resultados")

# enms
tif <- dir(patt = ".tif$")
tif

enm <- raster(tif[[1]])
enm

plot(enm, main = names(enm), col = colorRamps::matlab.like2(100))

#-----------------------------------------------------------------####

# import evaluates
csv <- purrr::map_dfr(dir(patt = ".csv"), readr::read_csv)
csv
str(csv)

## frequency ensemble 
# species : se tivessem varias sp
sp <- csv %>% 
  dplyr::select(species) %>% #pegarias os nomes das especies para ser selecionada
  dplyr::distinct() %>% 
  dplyr::pull()
sp

# algorithms
al <- csv %>% 
  dplyr::select(algorithm) %>% 
  dplyr::distinct() %>%
  dplyr::pull() %>% 
  stringr::str_replace("_", "")
al

# ensembles
ens <- enm 
ens[] <- 0 #contar celulas com 0
ens
plot(ens)

# directory
#dir.create("00_ensemble_freq")


# for
for(i in sp){ #so tenho 1 sp
  
  # select model by species
  tif.sp <- grep(i, tif, value = TRUE)  #grep=seleciona arquivo, rasters da sp
  eva.sp <- csv %>% dplyr::filter(species == i) #filtrar por nome da especie
  
  # information
  print(paste0("The ensemble for ", i, " started, relax, take a coffee, it may take awhile..."))
  
  
  for(j in al){ #para ir rolando cada sp por algoritmo
    
    # select model by algorithms
    tif.al <- grep(j, tif.sp, value = TRUE)	#agora eh pra selecionar so o algoritmo pra sp
    eva.al <- eva.sp %>% dplyr::filter(algorithm == j)
    
    # information
    print(paste0("The ensemble for '", i, "', algorithm '", j, "' are going!"))
    
    # import raster
    enm.al <- stack(tif.al)
    
    
    for(k in seq(length(tif.al))){ 	#k=replicas
      
      # sum #ens=planilha vazia #threshold=coluna 5 
      ens <- sum(ens, enm.al[[k]] >= eva.al[k, 5] %>% dplyr::pull())
      		#soma tudo q for maior ou igual ao threshold
    }
    
  }
  
  # export
  setwd("00_ensemble_freq")
  writeRaster(ens / (length(tif.sp)), paste0("ensemble_freq_", i, ".tif"), #mudar nome do arq
              options = c("COMPRESS=DEFLATE"), format = "GTiff", overwrite = TRUE)
  setwd("..")
  
  # information
print(paste0("Nice! The ensemble of ", i, " it's done!"))
  
  
  ens[] <- 0
  
  print("Yeh! It's over!!!")
  
}

###----------------------------------------------------------------------------###
setwd("C:/R/modelagem_sp/projeto/resultados")
# directory
setwd("00_ensemble_freq")

# import
mo <- stack(dir(patt = ".tif"))
mo

# final map

ggplot() +
  geom_raster(data = raster::rasterToPoints(mo) %>% tibble::as_tibble(), 
              aes(x, y, fill = ensemble_freq_Sapajus_flavius)) + #olha o nome gerado 
  scale_fill_gradientn(colours = colorRamps::matlab.like2(100)) +
 # geom_point(data = occ, aes(lon, lat), size = 2, alpha = .7) +
  theme_minimal() +
  theme(legend.title = element_blank())


sample(c(1,2,3), 1)

############################### FUTURO ############################
# import data
# directory
setwd("C:/R/modelagem_sp/projeto/resultados/futuro")

# enms
tif <- dir(patt = ".tif$")
tif

enm <- raster(tif[[1]])
enm

plot(enm, main = names(enm), col = colorRamps::matlab.like2(100))

#-----------------------------------------------------------------####

# import evaluates
csv <- purrr::map_dfr(dir(patt = ".csv"), readr::read_csv)
csv
str(csv)

## frequency ensemble 
# species : se tivessem varias sp
sp <- csv %>% 
  dplyr::select(species) %>% #pegarias os nomes das especies para ser selecionada
  dplyr::distinct() %>% 
  dplyr::pull()
sp

# algorithms
al <- csv %>% 
  dplyr::select(algorithm) %>% 
  dplyr::distinct() %>%
  dplyr::pull() %>% 
  stringr::str_replace("_", "")
al

# ensembles
ens <- enm 
ens[] <- 0 #contar celulas com 0
ens
plot(ens)

# directory
dir.create("00_ensemble_freq")


# for
for(i in sp){ #so tenho 1 sp
  
  # select model by species
  tif.sp <- grep(i, tif, value = TRUE)  #grep=seleciona arquivo, rasters da sp
  eva.sp <- csv %>% dplyr::filter(species == i) #filtrar por nome da especie
  
  # information
  print(paste0("The ensemble for ", i, " started, relax, take a coffee, it may take awhile..."))
  
  
  for(j in al){ #para ir rolando cada sp por algoritmo
    
    # select model by algorithms
    tif.al <- grep(j, tif.sp, value = TRUE)	#agora eh pra selecionar so o algoritmo pra sp
    eva.al <- eva.sp %>% dplyr::filter(algorithm == j)
    
    # information
    print(paste0("The ensemble for '", i, "', algorithm '", j, "' are going!"))
    
    # import raster
    enm.al <- stack(tif.al)
    
    
    for(k in seq(length(tif.al))){ 	#k=replicas
      
      # sum #ens=planilha vazia #threshold=coluna 5 
      ens <- sum(ens, enm.al[[k]] >= eva.al[k, 5] %>% dplyr::pull())
      		#soma tudo q for maior ou igual ao threshold
    }
    
  }
  
  # export
  setwd("00_ensemble_freq")
  writeRaster(ens / (length(tif.sp)), paste0("future_ensemble_freq_", i, ".tif"), #mudar nome do arq
              options = c("COMPRESS=DEFLATE"), format = "GTiff", overwrite = TRUE)
  setwd("..")
  
  # information
print(paste0("Nice! The ensemble of ", i, " it's done!"))
  
  
  ens[] <- 0
  
  print("Yeh! It's over!!!")
  
}

###----------------------------------------------------------------------------###
setwd("C:/R/modelagem_sp/projeto/resultados/futuro")
# directory
setwd("00_ensemble_freq")

# import
mo <- stack(dir(patt = ".tif"))
mo

# final map

ggplot() +
  geom_raster(data = raster::rasterToPoints(mo) %>% tibble::as_tibble(), 
              aes(x, y, fill = future_ensemble_freq_Sapajus_flavius)) + #olha o nome gerado 
  scale_fill_gradientn(colours = colorRamps::matlab.like2(100)) +
 # geom_point(data = occ, aes(lon, lat), size = 2, alpha = .7) +
  theme_minimal() +
  theme(legend.title = element_blank())


sample(c(1,2,3), 1)


